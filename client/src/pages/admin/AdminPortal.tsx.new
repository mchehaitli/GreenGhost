import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/hooks/use-auth';
import { useLocation } from 'wouter';
import { useToast } from '@/hooks/use-toast';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import {
  User,
  Settings,
  UserPlus,
  BarChart, 
  Mail,
  CheckCircle,
  Users,
  DollarSign,
  Plus,
  Edit,
  X,
  Loader2,
  FileText,
} from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { LoadingOverlay } from "@/components/ui/loading-overlay";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";

type Service = {
  id: number;
  name: string;
  description: string;
  price: number;
  sort_order: number;
};

type Plan = {
  id: number;
  name: string;
  description: string;
  price: number;
  billing_period: 'monthly' | 'yearly';
  sort_order: number;
  features?: PlanFeature[];
};

type PlanFeature = {
  id?: number;
  plan_id?: number;
  feature: string;
  included: boolean;
  sort_order: number;
};

type PageContent = {
  id: number;
  page: string;
  section: string;
  key: string;
  content: string;
};

const AdminPortal = () => {
  const { user, isLoading: authLoading, logout } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [, setLocation] = useLocation();
  const [activeTab, setActiveTab] = useState("pricing");
  const [showServiceDialog, setShowServiceDialog] = useState(false);
  const [showPlanDialog, setShowPlanDialog] = useState(false); 
  const [showContentDialog, setShowContentDialog] = useState(false);
  const [editingService, setEditingService] = useState<Service | null>(null);
  const [editingPlan, setEditingPlan] = useState<Plan | null>(null);
  const [editingContent, setEditingContent] = useState<PageContent | null>(null);
  const [isSavingService, setIsSavingService] = useState(false);
  const [isSavingPlan, setIsSavingPlan] = useState(false);
  const [isSavingContent, setIsSavingContent] = useState(false);

  useEffect(() => {
    if (!authLoading && !user) {
      setLocation('/login');
    }
  }, [user, authLoading, setLocation]);

  // Pricing related queries
  const { data: services = [], isLoading: servicesLoading } = useQuery<Service[]>({
    queryKey: ['services'],
    queryFn: async () => {
      const response = await fetch('/api/pricing/services');
      if (!response.ok) throw new Error('Failed to fetch services');
      const data = await response.json();
      return Array.isArray(data) ? data : [];
    },
    enabled: activeTab === "pricing",
  });

  const { data: plans = [], isLoading: plansLoading } = useQuery<Plan[]>({
    queryKey: ['plans'],
    queryFn: async () => {
      const response = await fetch('/api/pricing/plans');
      if (!response.ok) throw new Error('Failed to fetch plans');
      const data = await response.json();
      return Array.isArray(data) ? data : [];
    },
    enabled: activeTab === "pricing",
  });

  const { data: pageContent = [], isLoading: contentLoading } = useQuery<PageContent[]>({
    queryKey: ['pricing-content'],
    queryFn: async () => {
      const response = await fetch('/api/pricing/content');
      if (!response.ok) throw new Error('Failed to fetch page content');
      const data = await response.json();
      return Array.isArray(data) ? data : [];
    },
    enabled: activeTab === "pricing",
  });

  const createServiceMutation = useMutation({
    mutationFn: async (service: Omit<Service, 'id'>) => {
      setIsSavingService(true);
      try {
        const response = await fetch('/api/pricing/services', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(service),
        });
        if (!response.ok) throw new Error('Failed to create service');
        return response.json();
      } finally {
        setIsSavingService(false);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['services'] });
      setShowServiceDialog(false);
      toast({
        title: "Success",
        description: "Service created successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to create service",
        variant: "destructive"
      });
    },
  });

  const updateServiceMutation = useMutation({
    mutationFn: async (service: Service) => {
      const response = await fetch(`/api/pricing/services/${service.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(service),
      });
      if (!response.ok) throw new Error('Failed to update service');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['services'] });
      setShowServiceDialog(false);
      toast({
        title: "Service updated",
        description: "The service has been updated successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to update service",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  const deleteServiceMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/pricing/services/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to delete service');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['services'] });
      toast({
        title: "Service deleted",
        description: "The service has been deleted successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to delete service",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  const createPlanMutation = useMutation({
    mutationFn: async (plan: Omit<Plan, 'id'>) => {
      setIsSavingPlan(true);
      try {
        const response = await fetch('/api/pricing/plans', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(plan),
        });
        if (!response.ok) throw new Error('Failed to create plan');
        return response.json();
      } finally {
        setIsSavingPlan(false);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['plans'] });
      setShowPlanDialog(false);
      toast({
        title: "Plan created",
        description: "The plan has been created successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to create plan",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  const updatePlanMutation = useMutation({
    mutationFn: async (plan: Plan) => {
      const response = await fetch(`/api/pricing/plans/${plan.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(plan),
      });
      if (!response.ok) throw new Error('Failed to update plan');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['plans'] });
      setShowPlanDialog(false);
      toast({
        title: "Plan updated",
        description: "The plan has been updated successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to update plan",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  const deletePlanMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/pricing/plans/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to delete plan');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['plans'] });
      toast({
        title: "Plan deleted",
        description: "The plan has been deleted successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to delete plan",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  const createContentMutation = useMutation({
    mutationFn: async (content: Omit<PageContent, 'id'>) => {
      setIsSavingContent(true);
      try {
        const response = await fetch('/api/pricing/content', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(content),
        });
        if (!response.ok) throw new Error('Failed to create content');
        return response.json();
      } finally {
        setIsSavingContent(false);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['pricing-content'] });
      setShowContentDialog(false);
      toast({
        title: "Content created",
        description: "The content has been created successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to create content",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  const updateContentMutation = useMutation({
    mutationFn: async (content: PageContent) => {
      const response = await fetch(`/api/pricing/content/${content.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(content),
      });
      if (!response.ok) throw new Error('Failed to update content');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['pricing-content'] });
      setShowContentDialog(false);
      toast({
        title: "Content updated",
        description: "The content has been updated successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to update content",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  const deleteContentMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/pricing/content/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to delete content');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['pricing-content'] });
      toast({
        title: "Content deleted",
        description: "The content has been deleted successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to delete content",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    },
  });

  if (authLoading) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-200px)]">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="container py-4 md:py-10 px-4 md:px-8">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6 md:mb-8">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Admin Portal</h1>
          <p className="text-muted-foreground mt-1">Manage your platform content and settings</p>
        </div>
        <div className="flex flex-col md:flex-row items-start md:items-center gap-2">
          <Badge variant="outline" className="flex gap-1 px-3 py-1">
            <User className="w-3 h-3" /> {user?.username}
          </Badge>
          <Button
            variant="outline"
            size="sm"
            onClick={async () => {
              try {
                await logout();
                setLocation('/login');
              } catch (error) {
                toast({
                  title: "Logout Failed",
                  description: "Could not log out. Please try again.",
                  variant: "destructive"
                });
              }
            }}
          >
            Logout
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="w-full md:w-auto overflow-x-auto flex whitespace-nowrap">
          <TabsTrigger value="pricing">
            <DollarSign className="w-4 h-4 mr-2" />
            Pricing
          </TabsTrigger>
          <TabsTrigger value="settings">
            <Settings className="w-4 h-4 mr-2" />
            Settings
          </TabsTrigger>
        </TabsList>

        <TabsContent value="pricing">
          <div className="min-h-screen bg-background">
            <section className="py-8">
              <div className="container">
                <LoadingOverlay 
                  isLoading={servicesLoading || plansLoading || contentLoading}
                  text="Loading pricing data..."
                />

                {/* Plans Section */}
                <Card className="p-6 mb-8">
                  <div className="flex justify-between items-center mb-6">
                    <div>
                      <h2 className="text-2xl font-bold">Subscription Plans</h2>
                      <p className="text-muted-foreground">Manage your subscription plans and features</p>
                    </div>
                    <Button onClick={() => {
                      setEditingPlan(null);
                      setShowPlanDialog(true);
                    }}>
                      <Plus className="w-4 h-4 mr-2" />
                      Add Plan
                    </Button>
                  </div>

                  <div className="grid md:grid-cols-3 gap-8">
                    {plans.map((plan) => (
                      <Card key={plan.id} className={`relative overflow-hidden ${plan.sort_order === 1 ? 'border-primary shadow-lg' : ''}`}>
                        {plan.sort_order === 1 && (
                          <div className="absolute -top-4 left-0 right-0 flex justify-center">
                            <span className="bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm font-medium">
                              Most Popular
                            </span>
                          </div>
                        )}
                        <CardHeader>
                          <div className="flex justify-between items-start">
                            <CardTitle className="text-2xl">{plan.name}</CardTitle>
                            <div className="flex gap-1">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => {
                                  setEditingPlan(plan);
                                  setShowPlanDialog(true);
                                }}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => deletePlanMutation.mutate(plan.id)}
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          <div className="mt-4 flex items-baseline">
                            <span className="text-4xl font-bold">${plan.price}</span>
                            <span className="text-muted-foreground ml-2">/{plan.billing_period}</span>
                          </div>
                          <CardDescription className="mt-4">
                            {plan.description}
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <ul className="space-y-3">
                            {plan.features?.map((feature, idx) => (
                              <li key={idx} className="flex items-start gap-2">
                                <CheckCircle className={`h-5 w-5 flex-shrink-0 ${feature.included ? 'text-primary' : 'text-muted-foreground'}`} />
                                <span>{feature.feature}</span>
                              </li>
                            ))}
                          </ul>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </Card>

                {/* Additional Services Section */}
                <Card className="p-6">
                  <div className="flex justify-between items-center mb-6">
                    <div>
                      <h2 className="text-2xl font-bold">Additional Services</h2>
                      <p className="text-muted-foreground">Manage your additional service offerings</p>
                    </div>
                    <Button onClick={() => {
                      setEditingService(null);
                      setShowServiceDialog(true);
                    }}>
                      <Plus className="w-4 h-4 mr-2" />
                      Add Service
                    </Button>
                  </div>

                  <div className="grid md:grid-cols-3 gap-6">
                    {services.map((service) => (
                      <Card key={service.id} className="relative group">
                        <CardContent className="p-6">
                          <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <div className="flex gap-1">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => {
                                  setEditingService(service);
                                  setShowServiceDialog(true);
                                }}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => deleteServiceMutation.mutate(service.id)}
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          <div>
                            <h3 className="text-xl font-semibold mb-2">{service.name}</h3>
                            <p className="text-muted-foreground mb-4">{service.description}</p>
                            <div className="mt-4 pt-4 border-t border-border">
                              <div className="flex items-baseline gap-1">
                                <span className="text-2xl font-bold text-primary">
                                  ${service.price.toFixed(2)}
                                </span>
                                <span className="text-sm text-muted-foreground">/sq ft</span>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </Card>
              </div>
            </section>
          </div>
        </TabsContent>
      </Tabs>

      {/* Service Dialog */}
      <Dialog open={showServiceDialog} onOpenChange={setShowServiceDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{editingService ? 'Edit Service' : 'Add New Service'}</DialogTitle>
          </DialogHeader>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.currentTarget);
              const serviceData = {
                name: formData.get('name') as string,
                description: formData.get('description') as string,
                price: parseFloat(formData.get('price') as string),
                sort_order: parseInt(formData.get('sort_order') as string),
              };

              if (editingService) {
                updateServiceMutation.mutate({ ...serviceData, id: editingService.id });
              } else {
                createServiceMutation.mutate(serviceData);
              }
            }}
          >
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">Name</Label>
                <Input
                  id="name"
                  name="name"
                  defaultValue={editingService?.name}
                  required
                />
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  name="description"
                  defaultValue={editingService?.description}
                  required
                />
              </div>
              <div>
                <Label htmlFor="price">Price per Square Foot</Label>
                <Input
                  id="price"
                  name="price"
                  type="number"
                  step="0.01"
                  defaultValue={editingService?.price}
                  required
                />
              </div>
              <div>
                <Label htmlFor="sort_order">Sort Order</Label>
                <Input
                  id="sort_order"
                  name="sort_order"
                  type="number"
                  defaultValue={editingService?.sort_order ?? 0}
                  required
                />
              </div>
            </div>
            <DialogFooter className="mt-6">
              <Button type="submit" disabled={isSavingService}>
                {isSavingService && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                {editingService ? 'Update Service' : 'Create Service'}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Plan Dialog */}
      <Dialog open={showPlanDialog} onOpenChange={setShowPlanDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>{editingPlan ? 'Edit Plan' : 'Add New Plan'}</DialogTitle>
          </DialogHeader>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.currentTarget);
              const features = Array.from(document.querySelectorAll('[data-feature]')).map((el) => ({
                feature: (el.querySelector('[name="feature"]') as HTMLInputElement).value,
                included: (el.querySelector('[name="included"]') as HTMLInputElement).checked,
                sort_order: parseInt((el.querySelector('[name="feature_sort_order"]') as HTMLInputElement).value),
              }));

              const planData = {
                name: formData.get('name') as string,
                description: formData.get('description') as string,
                price: parseFloat(formData.get('price') as string),
                billing_period: formData.get('billing_period') as 'monthly' | 'yearly',
                sort_order: parseInt(formData.get('sort_order') as string),
                features,
              };

              if (editingPlan) {
                updatePlanMutation.mutate({ ...planData, id: editingPlan.id });
              } else {
                createPlanMutation.mutate(planData);
              }
            }}
          >
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">Name</Label>
                <Input
                  id="name"
                  name="name"
                  defaultValue={editingPlan?.name}
                  required
                />
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  name="description"
                  defaultValue={editingPlan?.description}
                  required
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="price">Price</Label>
                  <Input
                    id="price"
                    name="price"
                    type="number"
                    step="0.01"
                    defaultValue={editingPlan?.price}
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="billing_period">Billing Period</Label>
                  <Select
                    name="billing_period"
                    defaultValue={editingPlan?.billing_period ?? 'monthly'}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select billing period" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="monthly">Monthly</SelectItem>
                      <SelectItem value="yearly">Yearly</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div>
                <Label htmlFor="sort_order">Sort Order</Label>
                <Input
                  id="sort_order"
                  name="sort_order"
                  type="number"
                  defaultValue={editingPlan?.sort_order ?? 0}
                  required
                />
              </div>
              <div>
                <Label>Features</Label>
                <div className="space-y-2 mt-2">
                  {(editingPlan?.features ?? [{ feature: '', included: true, sort_order: 0 }]).map((feature, index) => (
                    <div key={index} data-feature className="grid grid-cols-[1fr,auto,auto] gap-2 items-center">
                      <Input
                        name="feature"
                        placeholder="Feature description"
                        defaultValue={feature.feature}
                        required
                      />
                      <div className="flex items-center gap-2">
                        <Label htmlFor={`included-${index}`} className="text-sm">Included</Label>
                        <Checkbox
                          id={`included-${index}`}
                          name="included"
                          defaultChecked={feature.included}
                        />
                      </div>
                      <Input
                        name="feature_sort_order"
                        type="number"
                        className="w-20"
                        defaultValue={feature.sort_order}
                        required
                      />
                    </div>
                  ))}
                  <Button
                    type="button"
                    variant="outline"
                    className="w-full mt-2"
                    onClick={() => {
                      const featuresContainer = document.querySelector('[data-feature]')?.parentElement;
                      if (featuresContainer) {
                        const newFeature = featuresContainer.lastElementChild?.cloneNode(true) as HTMLElement;
                        if (newFeature) {
                          const inputs = newFeature.querySelectorAll('input');
                          inputs.forEach(input => {
                            if (input.name === 'feature') input.value = '';
                            if (input.name === 'feature_sort_order') {
                              input.value = String(featuresContainer.children.length);
                            }
                          });
                          featuresContainer.appendChild(newFeature);
                        }
                      }
                    }}
                  >
                    Add Feature
                  </Button>
                </div>
              </div>
            </div>
            <DialogFooter className="mt-6">
              <Button type="submit" disabled={isSavingPlan}>
                {isSavingPlan && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                {editingPlan ? 'Update Plan' : 'Create Plan'}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AdminPortal;